## CSE 331 HW6 Questions

NOTE: This file is used as part of HW6, and is not due as part of the HW5
submission. You may leave it blank for HW5.

## Part 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of nodes and a collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there 
       is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

Representation A has O(1) runtime complexity for adding a node or an edge, but finding edges from/to a
certain node runs in O(E) time.
Using an adjacency list also has O(1) runtime complexity for adding a node or an edge. It also benefits
finding edges from a certain node, but finding edges to a certain node runs in O(E) time.
Using an adjacency matrix, finding edges operations can be done in O(1) runtime complexity, but adding a
node requires to resize the two-dimensional matrix which runs in O(V^2).



2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I choose to use the adjacency list. First off, I can use a HashMap to implement the adjacency
list where keys are node and values are edges from that node. Using a well-established data
structure is safer and more efficient. Also, adding nodes and edges, removing edges, finding
nodes and edges are benefit from the HashMap. The only drawback  supported by my implementation
is to find edges pointing to a certain node.



## Part 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.
I added tests for removing a specific edge since the original tests didn't include these tests.



2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.
Yes.
I changed the Edge class to be immutable because
* it's unnecessary to change the label of an edge between two certain nodes.
  Instead, clients can add an edge with the new label between them.
* Making Edge immutable will prevent representation exposure on edges when returning a list of edges.
